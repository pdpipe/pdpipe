name: Test

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: '0 */72 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:

  pytester:
    runs-on: ${{ matrix.os }}
    environment: test
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        os: ["ubuntu-latest", "macOS-latest", "windows-latest"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install codecov
          python -m pip install --only-binary=all numpy scipy pandas scikit-learn nltk
          python -m pip install -e ".[test]"

      # 1️⃣  Cache anything we download
      - name: Cache NLTK corpora
        uses: actions/cache@v4
        with:
          path: ./nltk_data
          key: nltk-data-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            nltk-data-

      - name: Download punkt corpora
        shell: bash
        env:
          NLTK_DATA: ${{ github.workspace }}/nltk_data
        run: |
          mkdir -p "$NLTK_DATA"
          python -m nltk.downloader -q -d "$NLTK_DATA" punkt punkt_tab

      - name: Unit tests
        env:
          NLTK_DATA: ${{ github.workspace }}/nltk_data
        run: |
          python -m pytest

      - name: Upload coverage to Codecov
        continue-on-error: true
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }} # required
          flags: ${{ matrix.backend }}

  testing-guardian:
    runs-on: ubuntu-latest
    needs: pytester
    if: always()
    steps:
      - run: echo "${{ needs.pytester.result }}"
      - name: failing...
        if: needs.pytester.result == 'failure'
        run: exit 1
      - name: cancelled or skipped...
        if: contains(fromJSON('["cancelled", "skipped"]'), needs.pytester.result)
        timeout-minutes: 1
        run: sleep 90
